<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TinyVMI Documentation</title>
    <link>https://tinyvmi.github.io/</link>
    <description>Recent content on TinyVMI Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jun 2018 14:22:24 -0400</lastBuildDate>
    
	<atom:link href="https://tinyvmi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install Xen With XSM FLASK Policy</title>
      <link>https://tinyvmi.github.io/step-by-step/install-xen-with-flask/</link>
      <pubDate>Mon, 04 Jun 2018 14:22:24 -0400</pubDate>
      
      <guid>https://tinyvmi.github.io/step-by-step/install-xen-with-flask/</guid>
      <description>Overview The following steps are tested with Xen 4.10.0, other Xen versions with 4.8 and onward should also be fine. The tested host OSes include Ubuntu 16.04, and 18.04. Other Linux based system should be OK as long as they are compatitable with Xen hypervisor.
Steps  1. Install Prerequest Packages of Xen
 2. Install Xen
 3. Install XSM Policy
 4. Update GRUB Scripts with Xen XSM</description>
    </item>
    
    <item>
      <title>Update XSM FLASK Policy</title>
      <link>https://tinyvmi.github.io/step-by-step/configuration/update-xsm-flask-policy/</link>
      <pubDate>Mon, 04 Jun 2018 22:21:07 -0400</pubDate>
      
      <guid>https://tinyvmi.github.io/step-by-step/configuration/update-xsm-flask-policy/</guid>
      <description>NOTE  Before this step, it is required to install Xen with FLASK enabled and to have a guest VM to be monitored by TinyVMI. To do so, see instructions here.
 The following assumes the XSM FLASK policy is booted from file /boot/flask/xenpolicy. However, the file name can be changed to other ones as shown here. Or can be dynamically loaded after booting via xl loadpolicy &amp;lt;xenpolicy_file&amp;gt;.
    1.</description>
    </item>
    
    <item>
      <title>Build and Run TinyVMI</title>
      <link>https://tinyvmi.github.io/step-by-step/run-tinyvmi/</link>
      <pubDate>Mon, 04 Jun 2018 14:43:03 -0400</pubDate>
      
      <guid>https://tinyvmi.github.io/step-by-step/run-tinyvmi/</guid>
      <description>Tips You can directly run a handy bash script in tinyvmi/ directory:
To build and run TinyVMI altogether in a single command:
cd xen-src/stubdom/tinyvmi sudo bash run.tiny.sh build  Or to only make TinyVMI without creating VM:
cd xen-src/stubdom/tinyvmi sudo bash run.tiny.sh make Or to only run TinyVMI without rebuild:
cd xen-src/stubdom/tinyvmi sudo bash run.tiny.sh For more details, see the following steps.
  Build TinyVMI # cd ./stubdom/ # make tinyvmi-stubdom  Grant Xenstore Permission to LibVMI Command xenstore-chmod can be used to change xenstore permissions.</description>
    </item>
    
    <item>
      <title>Update Stubdom Makefile</title>
      <link>https://tinyvmi.github.io/step-by-step/configuration/update-stubdom-makefile/</link>
      <pubDate>Mon, 04 Jun 2018 22:24:30 -0400</pubDate>
      
      <guid>https://tinyvmi.github.io/step-by-step/configuration/update-stubdom-makefile/</guid>
      <description>TinyVMI is developed as a stubdom running on top of Xen hypervisor.
The following changes are made to xen-src/stubdom/Makefile to support the compilation of TinyVMI with the necessary targets and library dependences (full makefile example):
--- stubdom/Makefile.old	2017-12-13 06:37:59.000000000 -0500 +++ stubdom/Makefile	2018-07-02 19:46:48.999545378 -0400 @@ -61,7 +61,7 @@  TARGET_LDFLAGS += -nostdlib -L$(CROSS_PREFIX)/$(GNU_TARGET_ARCH)-xen-elf/lib -TARGETS=$(STUBDOM_TARGETS) +TARGETS=$(STUBDOM_TARGETS) c xenstore tinyvmi  STUBDOMPATH=&amp;#34;stubdompath.sh&amp;#34; genpath-target = $(call buildmakevars2file,$(STUBDOMPATH)) @@ -101,6 +101,103 @@  $(MAKE) DESTDIR= &amp;amp;&amp;amp; \ $(MAKE) DESTDIR= install ) +############## +# Cross-json-c +############## +# https://s3.</description>
    </item>
    
    <item>
      <title>Update Mini-OS Makefile</title>
      <link>https://tinyvmi.github.io/step-by-step/configuration/update-minios-makefile/</link>
      <pubDate>Tue, 17 Jul 2018 13:18:54 -0400</pubDate>
      
      <guid>https://tinyvmi.github.io/step-by-step/configuration/update-minios-makefile/</guid>
      <description>Mini-OS is compiled with a minimal number of libraries essentially for its limited kernel functions. TinyVMI requires more libraries, including json-c, jansson.
All libraries in Mini-OS need to be statically compiled and linked into the tiny kernel. Under Xen development environment, we could statically compile the library in stubdom&amp;rsquo;s makefile as shown in the previous step. To link the library, the following changes need to be made in the Makefile of Mini-OS source code:</description>
    </item>
    
    <item>
      <title>Get Target Guest Info (Linux)</title>
      <link>https://tinyvmi.github.io/step-by-step/configuration/get-target-guest-info-linux/</link>
      <pubDate>Mon, 04 Jun 2018 22:24:45 -0400</pubDate>
      
      <guid>https://tinyvmi.github.io/step-by-step/configuration/get-target-guest-info-linux/</guid>
      <description>Start Target VM with FLASK label According to our setup in Update XSM FLASK Policy, a VM labeled with domU has priviledges to intropsect another domU&amp;rsquo;s physical memory. Now we can label TinyVMI with domU to grant the VM of TinyVMI with those privileges.
Change xl config file for the target VM. Add the following line to this file:
seclabel=&#39;system_u:system_r:domU_t&#39;  An example configuration file:
# Kernel image file. kernel = &amp;quot;mini-os.</description>
    </item>
    
    <item>
      <title>Configure TinyVMI with Target Info</title>
      <link>https://tinyvmi.github.io/step-by-step/configuration/configure-tinyvmi-with-target-guest-info/</link>
      <pubDate>Mon, 04 Jun 2018 22:25:06 -0400</pubDate>
      
      <guid>https://tinyvmi.github.io/step-by-step/configuration/configure-tinyvmi-with-target-guest-info/</guid>
      <description>1. Compile libvmi.conf run
xxd -i ~/etc/libvmi.conf &amp;gt; ~/etc/target_libvmi_conf_file.c  2. Compile system map run
xxd -i ~/etc/System.map-\&amp;lt;kernel_version&amp;gt; &amp;gt; ~/etc/target_libvmi_sym.c  Then, copy the following code to new file ~/etc/target_libvmi_sym.h:
#ifndef TARGET_LIBVMI_CONF_SYM_H #define TARGET_LIBVMI_CONF_SYM_H  /** * define system_map_string for Linux * change this if use another system map * all the System_map_* variables are declared here, and * defined at file /tiny-vmi/config/target_conf/target_libvmi_sym.c * the definition is generated by xxd command which coverts a file * to ASCII string codes: xxd -i System_map_* */ #define linux_system_map_string System_map_4_4_0_101_generic #define linux_system_map_string_len System_map_4_4_0_101_generic_len  extern unsigned char System_map_4_4_0_101_generic[]; extern unsigned int System_map_4_4_0_101_generic_len; #define linux_system_map_string_SRC_FILE &amp;#34;string&amp;#34;  #endif // TARGET_LIBVMI_CONF_SYM_H In the above file, replace variable System_map_4_4_0_101_generic and System_map_4_4_0_101_generic_len with your own variable names generated in the last step.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tinyvmi.github.io/_footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tinyvmi.github.io/_footer/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>